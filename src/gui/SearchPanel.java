/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import library.*;
import util.PopUpMessages;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.plaf.basic.BasicBorders;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * Provides interface for searching the database for books and displaying the
 * results.
 *
 * @author ross
 */
public class SearchPanel extends javax.swing.JPanel {
    private static Logger logger = Logger.getLogger(SearchPanel.class.getName());

    private javax.swing.JButton butClear;
    private javax.swing.JButton butDewey;
    private javax.swing.JButton butSearchText;
    private javax.swing.JButton butViewAll;
    private javax.swing.JComboBox<String> comboCrit;
    private javax.swing.JComboBox<String> comboSearchBy;
    private javax.swing.JComboBox<String> comboSearchItem;
    private javax.swing.ButtonGroup groupSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel lKeyword;
    private javax.swing.JLabel lSearchBy;
    private javax.swing.JRadioButton radAllBooks;
    private javax.swing.JRadioButton radDum;
    private javax.swing.JRadioButton radFiction;
    private javax.swing.JRadioButton radNonFiction;
    private javax.swing.JScrollPane searchPane;
    private javax.swing.JTextField tfKeyword;
    private Driver driver = null;
    Popup authorPopup = null;

    private static final String[] fictionOnlySearchFields = {"ID", "Title",
            "Price",
            "Place bought", "Month bought", "Year bought",
            "Month and year bought", "First published",
            "Series", "Type Of Book", "Genre"};

    private static final String[] nonFictionOnlySearchFields = {"ID", "Title",
            "Price", "Place bought", "Month bought", "Year bought",
            "Month and year bought", "First published",
            "Dewey number"};

    private static final String[] allBooksSearchFields = {"ID", "Title",
            "Price",
            "Place bought", "Month bought", "Year bought",
            "Month and year bought", "First published"};

    /**
     * Creates new form SearchPanel.
     *
     * @param d An instance of <code>Driver</code>
     */
    public SearchPanel(Driver d) {
        initComponents();
        driver = d;
        comboSearchByItemStateChanged(null);
        radDum.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        groupSearch = new javax.swing.ButtonGroup();
        lSearchBy = new javax.swing.JLabel();
        comboSearchBy = new javax.swing.JComboBox();
        lKeyword = new javax.swing.JLabel();
        tfKeyword = new javax.swing.JTextField();
        butSearchText = new javax.swing.JButton();
        comboCrit = new javax.swing.JComboBox();
        searchPane = new javax.swing.JScrollPane();
        butClear = new javax.swing.JButton();
        butViewAll = new javax.swing.JButton();
        butDewey = new javax.swing.JButton();
        comboSearchItem = new javax.swing.JComboBox();
        radFiction = new javax.swing.JRadioButton();
        radNonFiction = new javax.swing.JRadioButton();
        radDum = new javax.swing.JRadioButton();
        radAllBooks = new javax.swing.JRadioButton();

        jScrollPane1.setViewportView(jTree1);

        setPreferredSize(new java.awt.Dimension(1037, 604));

        lSearchBy.setText("Search by:");

        comboSearchBy.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"ID", "Title", "Price", "Place bought", "Month bought", "Year bought", "Month and year bought", "First published"}));
        comboSearchBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSearchByItemStateChanged(evt);
            }
        });

        lKeyword.setText("Keyword(s):");

        butSearchText.setText("Search");
        butSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchTextActionPerformed(evt);
            }
        });
        butSearchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                butSearchTextKeyReleased(evt);
            }
        });

        comboCrit.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Less than/before", "equal to/in", "Greater than/after"}));

        butClear.setText("Clear");
        butClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butClearActionPerformed(evt);
            }
        });
        butClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                butClearKeyReleased(evt);
            }
        });

        butViewAll.setText("View all");
        butViewAll.setToolTipText("Select fiction or non-fiction above");
        butViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butViewAllActionPerformed(evt);
            }
        });
        butViewAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                butViewAllKeyReleased(evt);
            }
        });

        butDewey.setText("Search by Dewey number");
        butDewey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeweyActionPerformed(evt);
            }
        });
        butDewey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                butDeweyKeyReleased(evt);
            }
        });

        groupSearch.add(radFiction);
        radFiction.setText("Fiction");
        radFiction.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radFictionItemStateChanged(evt);
            }
        });

        groupSearch.add(radNonFiction);
        radNonFiction.setText("Non-fiction");
        radNonFiction.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radNonFictionItemStateChanged(evt);
            }
        });

        groupSearch.add(radDum);
        radDum.setText("dum");

        groupSearch.add(radAllBooks);
        radAllBooks.setText("All books");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(comboSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(comboCrit, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lKeyword)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfKeyword, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(comboSearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(33, 33, 33)
                                                .addComponent(butSearchText))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(radDum)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(butDewey)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(butViewAll)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(butClear))
                                        .addComponent(searchPane)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lSearchBy)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radFiction)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(radNonFiction)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(radAllBooks)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lSearchBy)
                                        .addComponent(radFiction)
                                        .addComponent(radNonFiction)
                                        .addComponent(radAllBooks))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(comboSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboCrit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lKeyword)
                                        .addComponent(tfKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboSearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(butSearchText))
                                .addGap(18, 18, 18)
                                .addComponent(searchPane, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(butViewAll)
                                        .addComponent(butClear)
                                        .addComponent(butDewey)
                                        .addComponent(radDum))
                                .addContainerGap())
        );
    }// </editor-fold>

    /**
     * search by text
     *
     * @param evt button click event
     */
    private void butSearchTextActionPerformed(java.awt.event.ActionEvent evt) {
        CallableStatement cstmt = null;
        ResultSet rs = null;

        switch (((String) comboSearchBy.getSelectedItem()).toLowerCase()) {
            case "id": {
                cstmt = driver.getCallStatement("{CALL searchID(?)}");

                try {
                    cstmt.setInt(1, Integer.parseInt(tfKeyword.getText()));
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            case "title": {
                cstmt = driver.getCallStatement("{CALL searchTitle(?)}");

                String title = tfKeyword.getText();

                try {
                    cstmt.setString(1, title);
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            case "author": {
                cstmt = driver.getCallStatement("{CALL searchAuthor(?)}");

                String author = tfKeyword.getText();

                try {
                    cstmt.setString(1, author);
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            case "shop": {
                //shop. NOT WORKING FOR NONFICTION
                cstmt = driver.getCallStatement("{CALL searchBooksPlaceBought(?)}");

                Shop shop = new Shop(comboSearchItem.getSelectedItem().toString());
                int shopID = shop.getID();

                try {
                    cstmt.setInt(1, shopID);
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            case "series": {
                cstmt = driver.getCallStatement("{CALL searchSeries(?)}");

                int series = Integer.parseInt(tfKeyword.getText());

                try {
                    cstmt.setInt(1, series);
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            case "genre": {
                cstmt = driver.getCallStatement("{CALL searchGenre(?)}");

                Genre gen = new Genre(comboSearchItem.getSelectedItem().toString());
                int genreID = gen.getId();

                try {
                    cstmt.setInt(1, genreID);
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            case "type": {
                //type. Fiction only
                cstmt = driver.getCallStatement("{CALL searchType(?)}");


                TypeOfBook type = new TypeOfBook(comboSearchItem.getSelectedItem().toString());
                int typeID = type.getID();

                try {
                    cstmt.setInt(1, typeID);
                } catch (SQLException ex) {
                    PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
                    ex.printStackTrace();
                }

                break;
            }
            default: {
                System.out.println("Default");
            }
        }

        try {
            //print query to check that it is correct
            //System.out.println("butSearchTextActionPerformed query: " + q);

            rs = cstmt.executeQuery();

            displayTable(rs);

            rs.close();
            cstmt.close();
        } catch (SQLException ex) {
            PopUpMessages.errorMessageNormal("From searchPanel.butSearchTextAP: " + ex);
            ex.printStackTrace();
        }
    }

    /**
     * Clears all textFields and textAreas
     *
     * @param evt The button clicked
     */
    private void butClearActionPerformed(java.awt.event.ActionEvent evt) {
        tfKeyword.setText("");
        searchPane.setViewportView(null);
        comboCrit.setSelectedIndex(0);
        comboSearchBy.setSelectedIndex(0);
        radDum.setSelected(true);
    }

    /**
     * View all Fiction or NonFiction books in the database
     *
     * @param evt button click event
     */
    private void butViewAllActionPerformed(java.awt.event.ActionEvent evt) {
        String query = "";

        if (radFiction.isSelected()) {
            query = "{CALL viewFiction()}";
        } else if (radNonFiction.isSelected()) {
            query = "{CALL viewNonFiction()}";
        } else {
            PopUpMessages.infoMessageNormal("Please select fiction or non-fiction");
            return;
        }

        try {
            CallableStatement cstmt = driver.getCallStatement(query);

            ResultSet rs = cstmt.executeQuery();

            displayTable(rs);

            rs.close();
            cstmt.close();
        } catch (SQLException se) {
            PopUpMessages.errorMessageNormal("From SearchPanel.butViewAllAP: " + se);
            se.printStackTrace();
        }
    }

    /**
     * Creates a new searchDeweyGUI so you can search by dewey number.
     *
     * @param evt button click event
     */
    private void butDeweyActionPerformed(java.awt.event.ActionEvent evt) {
        SearchDeweyGUI sdg = new SearchDeweyGUI(driver);
        sdg.setVisible(true);

        ResultSet rs = driver.query(sdg.getDeweyQuery());

        displayTable(rs);
        try {
            rs.close();
        } catch (SQLException se) {
            PopUpMessages.errorMessageNormal("from searchPanel.butSearchNumberAP: " + se);
            se.printStackTrace();
        }
    }

    /**
     * if shop, genre or type selected, blank tfKeyword and set comboSGT model
     * to selected
     *
     * @param evt button click event
     */
    private void comboSearchByItemStateChanged(java.awt.event.ItemEvent evt) {
        String selected = comboSearchBy.getSelectedItem().toString();
        selected = selected.toLowerCase();

        switch (selected) {
            case "place bought": {
                comboSearchItem.setModel(driver.getComboBoxModel(ComboBoxType.SHOP));
                searchByComboBox();
                break;
            }
            case "genre": {
                comboSearchItem.setModel(driver.getComboBoxModel(ComboBoxType.GENRE));
                searchByComboBox();
                break;
            }
            case "type of book": {
                comboSearchItem.setModel(driver.getComboBoxModel(ComboBoxType.TYPE));
                searchByComboBox();
                break;
            }
            case "author": {
                comboSearchItem.setModel(driver.getComboBoxModel(ComboBoxType.AUTHOR));
                AutoCompletion.enable(comboSearchItem);
                searchByComboBox();

                break;
            }
            case "series": {
                comboSearchItem.setModel(driver.getComboBoxModel(ComboBoxType.SERIES));
                AutoCompletion.enable(comboSearchItem);
                searchByComboBox();

                break;
            }
            case "price":
            case "month bought":
            case "year bought":
            case "month and year bought":
            case "first published": {
                comboCrit.setEnabled(true);

                tfKeyword.setEditable(true);
                tfKeyword.setBackground(Color.white);

                comboSearchItem.setEnabled(false);
                break;
            }
            case "id":
            case "title": {
                tfKeyword.setEditable(true);
                tfKeyword.setBackground(Color.white);

                comboSearchItem.setEnabled(false);
                comboCrit.setEnabled(false);

                break;
            }
            default: {
                logger.warning("gui.SearchPanel.comboSearchByItemStateChanged() - " +
                        "Something went wrong.");
                break;
            }
        }

    }

    /**
     * Change options in comboBox depending on whether fiction or non fiction is
     * selected
     *
     * @param evt button click event
     */
    private void radFictionItemStateChanged(java.awt.event.ItemEvent evt) {
        DefaultComboBoxModel<String> model;

        if (radFiction.isSelected()) {
            model = new DefaultComboBoxModel<>(fictionOnlySearchFields);
        } else if (radNonFiction.isSelected()) {
            model = new DefaultComboBoxModel<>(nonFictionOnlySearchFields);
        } else {
            model = new DefaultComboBoxModel<>(allBooksSearchFields);
        }

        comboSearchBy.setModel(model);

        tfKeyword.setEditable(true);
        tfKeyword.setBackground(Color.white);
        comboSearchItem.setEnabled(false);
    }

    private void radNonFictionItemStateChanged(java.awt.event.ItemEvent evt) {
        radFictionItemStateChanged(evt);
    }

    private void butSearchTextKeyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            butSearchTextActionPerformed(null);
        }
    }

    private void butDeweyKeyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            butDeweyActionPerformed(null);
        }
    }

    private void butViewAllKeyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            butViewAllActionPerformed(null);
        }
    }

    private void butClearKeyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            butClearActionPerformed(null);
        }
    }

    /**
     * if search by shop, genre or type is selected,
     * set tfKeyword uneditable and set comboSGT enabled
     */
    private void searchByComboBox() {
        tfKeyword.setEditable(false);
        tfKeyword.setBackground(new Color(214, 217, 223));

        comboSearchItem.setEnabled(true);
        comboCrit.setEnabled(false);

        comboCrit.setEnabled(false);
    }

    /**
     * Display the authors of the Book in the given row in a Popup JPanel
     */
    private void showAuthors(int row, JTable table) {
        int id = Integer.parseInt(table.getValueAt(row, 0).toString());

        List<String> authors = driver.getAuthors(id);

        JPanel popUpContent = new JPanel(); //panel with content of PopUP

        GridLayout layout = new GridLayout(authors.size(), 1);
        popUpContent.setLayout(layout);

        Border border = new BasicBorders.MenuBarBorder(Color.BLACK, Color.WHITE);

        popUpContent.setBorder(border);

        for (String a : authors) {
            JLabel label = new JLabel(a);

            popUpContent.add(label);
        }

        Point mousePoint = MouseInfo.getPointerInfo().getLocation();
        int xCoord = mousePoint.x;
        int yCoord = mousePoint.y;

        PopupFactory factory = PopupFactory.getSharedInstance();
        authorPopup = factory.getPopup(this, popUpContent, xCoord, yCoord);
        authorPopup.show();
    }

    /**
     * Display the contents of the given ResultSet in a JTable
     *
     * @param rs ResultSet to display
     */
    private void displayTable(ResultSet rs) {
        DefaultTableModel model = driver.buildTableModel(rs);

        int numRows = model.getRowCount();

        List<String> clickAuthor = new ArrayList<>();

        for (int i = 0; i < numRows; i++) {
            clickAuthor.add("click for Authors");
        }

        model.addColumn("Author", clickAuthor.toArray());

        final JTable myTable = new JTable(model);
        myTable.setEnabled(false);

        //Listen for wheel scroll
        myTable.addMouseWheelListener((MouseWheelEvent mwe) -> {
            if (authorPopup != null) {
                authorPopup.hide();
            }

            //dispatch event to parent to retain default scrolling behaviour
            myTable.getParent().dispatchEvent(mwe);
        });

        //Add mouseListener to Table to listener for click
        myTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (authorPopup != null) {
                    authorPopup.hide();
                }

                int row = myTable.rowAtPoint(evt.getPoint());
                int col = myTable.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    System.out.println(row + ", " + col);

                    String colName = myTable.getColumnName(col);
                    if (colName.equals("Author")) {
                        showAuthors(row, myTable);
                    }
                }
            }
        });

        searchPane.setViewportView(myTable);
    }
}
