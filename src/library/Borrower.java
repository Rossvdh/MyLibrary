/* Person who borrows books
 Ross van der Heyde
 26 January 2015*/
package library;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * @author ross
 */
public class Borrower implements DatabaseEntry {
    private static Logger logger = Logger.getLogger(Borrower.class.getName());

    private int id = -1;
    private String name;
    private String number;
    private String email;

    /**
     * Default constructor
     */
    public Borrower() {

    }

    /**
     * Creates a new Borrower with the given ID
     *
     * @param i
     */
    public Borrower(int i) {
        id = i;
        setNameFromDatabase();
    }

    /**
     * Creates a new <code>Borrower</code> with the given values
     *
     * @param id          ID number
     * @param name        Full name
     * @param number      contact number
     * @param emailAdress email address
     */
    public Borrower(int id, String name, String number, String emailAdress) {
        this.id = id;
        this.name = name;
        this.number = number;
        this.email = emailAdress;
    }

    /**
     * Creates a new Borrower object that is a copy of the given Borrower
     *
     * @param copy Borrower to copy
     */
    public Borrower(Borrower copy) {
        this.id = copy.id;
        this.email = copy.email;
        this.name = copy.name;
    }

    /**
     * Sets this <code>Borrower</code>'s ID number
     *
     * @param id ID number
     */
    public void setID(int id) {
        this.id = id;
    }

    /**
     * Sets this Borrower's name
     *
     * @param name the name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets this <code>Borrower</code>'s contact number
     *
     * @param number the contact number
     */
    public void setContactNumber(String number) {
        this.number = number;
    }

    /**
     * Sets this <code>Borrower</code>'s email address
     *
     * @param emailAddress the email address
     */
    public void setEmailAddress(String emailAddress) {
        email = emailAddress;
    }

    /**
     * Returns this <code>Borrower's</code> ID number
     *
     * @return the Borrower's ID number
     */
    public int getID() {
        return id;
    }

    /**
     * Returns this <code>Borrower</code>'s name
     *
     * @return the Borrower's name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of this borrower from database using ID
     */
    private void setNameFromDatabase() {
        try {
            ResultSet rs = DRIVER.query("SELECT fullName FROM Borrowers WHERE id =" + id);

            if (rs.next()) {
                name = rs.getString(1);
                rs.close();
            } else {
                DRIVER.errorMessageNormal("Borrower with ID " + id + " not found.");
            }
        } catch (SQLException se) {
            logger.log(Level.WARNING, se.toString(), se);
        }
    }

    /**
     * Returns this <code>Borrower</code>'s contact number
     *
     * @return contact number
     */
    public String getNumber() {
        return number;
    }

    /**
     * Returns this Borrower's email address
     *
     * @return email address
     */
    public String getEmailAddress() {
        return email;
    }

    /**
     * Returns a string representation of this Borrower, e.g.
     * 12/John Doe/0211234567/john@gmail.com
     *
     * @return String representation
     */
    public String toString() {
        return id + "/" + name + "/" + number + "/" + email;
    }

    /**
     * Determines if the given <code>Object</code> is equal to this <code>Borrower</code>
     * Two Borrowers are equal if their ID are equal or name, contact number, and email are
     * the same.
     *
     * @param other Object to compare to.
     * @return true if they are equal, false otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (other == null) {
            return false;
        } else if (other instanceof Borrower) {
            Borrower otherB = (Borrower) other;

            if (this.id == otherB.id) {
                return true;
            } else {
                return this.name.equals(otherB.name) && this.number.equals(otherB.number)
                        && this.email.equals(otherB.email);
            }
        } else {
            return false;
        }
    }

    /**
     * Return the has code of this Borrower. This method was generated by Intellij
     *
     * @return has code value
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, name, number, email);
    }

    /**
     * Add this borrower to the database
     *
     * @return true if successfully added, false otherwise
     */
    public boolean addToDatabase() {
        //name, contact, email
        CallableStatement cstmt = DRIVER.getCallStatement("{CALL addBorrower(?,?,?)}");
        try {
            //set parameters
            cstmt.setString(1, name);
            cstmt.setString(2, number);
            cstmt.setString(3, email);

            int num = cstmt.executeUpdate();

            cstmt.close();

            return num == 1;
        } catch (SQLException se) {
            DRIVER.errorMessageNormal("From Borrower.addToDatabase: " + se);
            logger.log(Level.WARNING, se.toString(), se);
        }

        return false;
    }

    /**
     * Update a specific field of this borrower
     *
     * @param field    String specifying field to be updated
     * @param newValue String containing new value of field
     * @return true if successfully updated, false otherwise
     */
    public boolean updateInDatabase(String field, String newValue) {
        String q = "UPDATE Borrowers SET " + field + " = " + newValue
                + " WHERE id = " + id;

        return DRIVER.modifyQuery(q);
    }

    /**
     * Deletes this borrower from the database
     *
     * @return true if successfully deleted, false otherwise
     */
    public boolean deleteFromDatabase() {
        setNameFromDatabase();

        int userChoice = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + name + "?");
        if (userChoice == JOptionPane.YES_OPTION) {
            CallableStatement cstmt = DRIVER.getCallStatement("{CALL deleteBorrower(?)}");

            try {
                cstmt.setInt(1, id);

                int num = cstmt.executeUpdate();

                cstmt.close();

                return num == 1;
            } catch (SQLException se) {
                logger.log(Level.WARNING, se.toString(), se);
            }
        }
        return false;
    }

    /**
     * Loans a book to this Borrower
     *
     * @param book Book being borrowed
     * @param date String with date book is being borrowed
     * @return true if successfully loaned, false otherwise
     */
    public boolean borrow(Book book, String date) {
        CallableStatement cstmt = DRIVER.getCallStatement("{CALL borrow(?,?,?)}");

        try {
            cstmt.setInt(1, id);
            cstmt.setInt(2, book.getID());
            cstmt.setString(3, date);

            int num = cstmt.executeUpdate();
            cstmt.close();

            return num == 1;
        } catch (SQLException se) {
            logger.log(Level.WARNING, se.toString(), se);
        }

        return false;
    }

    /**
     * Returns a book loaned by this borrower
     *
     * @param book Book being returned
     * @param date String with date book was returned
     * @return true if successfully returned, false otherwise
     */
    public boolean returnBook(Book book, String date) {
        CallableStatement cstmt = DRIVER.getCallStatement("{CALL returnBook(?,?,?)}");

        try {
            cstmt.setInt(1, id);
            cstmt.setInt(2, book.getID());
            cstmt.setString(3, date);

            int num = cstmt.executeUpdate();
            cstmt.close();

            return num == 1;
        } catch (SQLException se) {
            logger.log(Level.WARNING, se.toString(), se);
        }
        return false;
    }

}
